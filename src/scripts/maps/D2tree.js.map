{"version":3,"sources":["D2tree.ts"],"names":["Node","Node.constructor","Node.setLeftNode","Node.setRightNode","Node.getLeftNode","Node.getRightNode","Node.setColor","Node.getColor","Node.getLat","Node.getLng","D2tree","D2tree.constructor","D2tree._place","D2tree.addLeaf","D2tree.traverse"],"mappings":"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","file":"D2tree.js","sourcesContent":["/// <reference path=\"markerAggregator.d.ts\" />\n\nclass Node {\n    private _latKey: number;\n    private _lngKey: number;\n    private _value: any;\n    private _leftNode: Node;\n    private _rightNode: Node;\n    private _color: boolean;\n    \n    constructor (coords: any, value: any) {\n        // read coordinates \n        if (Array.isArray(coords) && coords.length >= 2\n            && typeof coords[0] === 'number' && typeof coords[1] === 'number') {\n            this._latKey = coords[0];\n            this._lngKey = coords[1]; \n        } else if ((coords.lat || coords.lat === 0) && (coords.lng || coords.lng === 0)) {\n            this._latKey = coords.lat;\n            this._lngKey = coords.lng; \n        } else {\n            console.error('D2tree - Node: wrong node coordinates');\n            this._latKey = 0;\n            this._lngKey = 0;\n        }\n        \n        // no branches\n        this._leftNode = null;\n        this._rightNode = null;\n        \n        // by default red\n        this._color = true;\n        \n        this._value = value;\n    }\n    \n    public setLeftNode (node: Node): Node {\n        this._leftNode = node;\n        return this._leftNode;\n    }\n    public setRightNode (node: Node): Node {\n        this._rightNode = node;\n        return this._rightNode;\n    }   \n    public getLeftNode (): Node {\n        return this._leftNode;\n    }\n    public getRightNode (): Node {\n        return this._rightNode;\n    }\n    public setColor (color: boolean) {\n        if (color) this._color = true;\n        else this._color = false;\n    }\n    public getColor (): boolean {\n        return this._color;\n    }\n    \n    public getLat (): number {\n        return this._latKey;\n    }\n    public getLng (): number {\n        return this._lngKey;\n    }\n}\n\nexport default /**\n * 2Dtree\n */\nclass D2tree {\n    private _root: Node;\n    \n    constructor (coords: any, value: any) {\n        this._root = new Node(coords, value);\n    }\n    \n    private _place (parentNode: Node, childNode: Node) {\n        var method: string;\n        var direction: string;\n        \n        if (parentNode.getColor) {\n            // RED - lat\n            method = 'getLat';            \n        } else {\n            // BLACK - lng\n            method = 'getLng';\n        }\n        \n        if (parentNode[method]() < childNode[method]()) {\n            // new to right\n            direction = 'RightNode';\n        } else {\n            // new to left\n            direction = 'LeftNode';\n        }\n        \n        if (!parentNode['get'+direction]()) {\n            // branch is empty\n            parentNode['set'+direction](childNode);\n        } else {\n            this._place(parentNode['get'+direction](), childNode);\n        }\n    }\n    \n    public addLeaf (coords: any, value: any) {\n        var newLeaf = new Node(coords, value);\n        \n        this._place(this._root, newLeaf);\n    }\n    \n    /** return array of all nodes in top to bottom, left to right order */\n    public traverse ():Node [] {\n        var output: Node [];\n        output = [this._root];\n        \n        var i = 0;\n        while (i < output.length) {\n            if (output[i]) {\n                output.push(output[i].getLeftNode());\n                output.push(output[i].getRightNode());    \n            }     \n        }\n        \n        return output;\n    }\n}"],"sourceRoot":"/source/"}